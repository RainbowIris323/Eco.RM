// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from VehicleTemplate.tt />

/**
namespace Eco.RM.ElectricTakeover.Objects;

using System;
using System.Collections.Generic;
using System.ComponentModel;
using Eco.Core.Controller;
using Eco.Core.Items;
using Eco.Core.Utils;
using Eco.Gameplay.Components;
using Eco.Gameplay.Components.Auth;
	using Eco.Gameplay.Components.Storage;
using Eco.Gameplay.Components.VehicleModules;
using Eco.Gameplay.GameActions;
using Eco.Gameplay.DynamicValues;
using Eco.Gameplay.Interactions;
using Eco.Gameplay.Items;
using Eco.Gameplay.Items.Recipes;
using Eco.Gameplay.Players;
using Eco.Gameplay.Skills;
using Eco.Gameplay.Objects;
using Eco.Gameplay.Occupancy;
using Eco.Gameplay.Systems.Exhaustion;
using Eco.Gameplay.Systems.NewTooltip;
using Eco.Gameplay.Systems.TextLinks;
using Eco.Shared.Math;
using Eco.Shared.Networking;
using Eco.Shared.Localization;
using Eco.Shared.Serialization;
using Eco.Shared.Utils;
using Eco.Shared.Items;
using static Eco.Gameplay.Components.PartsComponent;

[Serialized]
[LocDisplayName("Trailer Truck")]
[LocDescription("Modern truck for hauling sizable loads.")]
[IconGroup("World Object Minimap")]
[Weight(25000)]
[Category("Hidden")]
[AirPollution(0.5f)]
public partial class TrailerTruckItem : WorldObjectItem<TrailerTruckObject>, IPersistentData
{
    [Serialized, SyncToView, NewTooltipChildren(CacheAs.Instance, flags: TTFlags.AllowNonControllerTypeForChildren)] public object PersistentData { get; set; }
}

[Serialized]
[RequireComponent(typeof(StandaloneAuthComponent))]
[RequireComponent(typeof(PaintableComponent))]
[RequireComponent(typeof(FuelSupplyComponent))]
[RequireComponent(typeof(FuelConsumptionComponent))]
[RequireComponent(typeof(PublicStorageComponent))]
[RequireComponent(typeof(TailingsReportComponent))]
[RequireComponent(typeof(MovableLinkComponent))]
[RequireComponent(typeof(AirPollutionComponent))]
[RequireComponent(typeof(VehicleComponent))]
[RequireComponent(typeof(CustomTextComponent))]
[RequireComponent(typeof(ModularStockpileComponent))]
[RequireComponent(typeof(MinimapComponent))]           
[RequireComponent(typeof(PartsComponent))]
[RepairRequiresSkill(typeof(IndustrySkill), 6)]
public partial class TrailerTruckObject : PhysicsWorldObject, IRepresentsItem
{
    static TrailerTruckObject()
    {
        WorldObject.AddOccupancy<TrailerTruckObject>(new List<BlockOccupancy>(0));
    }
    public override TableTextureMode TableTexture => TableTextureMode.Metal;
    public override bool PlacesBlocks            => false;
    public override LocString DisplayName { get { return Localizer.DoStr("Trailer Truck"); } }
    public Type RepresentedItemType { get { return typeof(TrailerTruckItem); } }

    private static string[] fuelTagList = new string[]
    {
        "Liquid Fuel",
    };
    private TrailerTruckObject() { }
    protected override void Initialize()
    {
        this.ModsPreInitialize();
        base.Initialize();         
        this.GetComponent<CustomTextComponent>().Initialize(200);
        this.GetComponent<FuelSupplyComponent>().Initialize(2, fuelTagList);
        this.GetComponent<FuelConsumptionComponent>().Initialize(150);
        this.GetComponent<AirPollutionComponent>().Initialize(0.5f);
        this.GetComponent<StockpileComponent>().Initialize(new Vector3i(2,2,3));
        this.GetComponent<PublicStorageComponent>().Initialize(36, 8000000);
        this.GetComponent<MinimapComponent>().InitAsMovable();
        this.GetComponent<MinimapComponent>().SetCategory(Localizer.DoStr("Vehicles"));
        this.GetComponent<VehicleComponent>().Initialize(20, 3,2);
        this.GetComponent<VehicleComponent>().FailDriveMsg = Localizer.Do($"You are too hungry to drive {this.DisplayName}!");
        this.ModsPostInitialize();
                    {
            this.GetComponent<PartsComponent>().Config(() => LocString.Empty, new PartInfo[]
            {
                                    new() { TypeName = nameof(CombustionEngineItem), Quantity = 1},
                                    new() { TypeName = nameof(RubberWheelItem), Quantity = 2},
                                    new() { TypeName = nameof(LightBulbItem), Quantity = 1},
                                    new() { TypeName = nameof(LubricantItem), Quantity = 2},
                                });
        }
    }

    /// <summary>Hook for mods to customize before initialization. You can change housing values here.</summary>
    partial void ModsPreInitialize();
    /// <summary>Hook for mods to customize after initialization.</summary>
    partial void ModsPostInitialize();
}
*/